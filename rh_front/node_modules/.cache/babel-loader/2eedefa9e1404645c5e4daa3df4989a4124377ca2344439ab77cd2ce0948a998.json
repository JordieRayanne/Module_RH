{"ast":null,"code":"var _jsxFileName = \"D:\\\\ITU\\\\Rotsy\\\\S5\\\\Mr_Tovo\\\\rh_front\\\\src\\\\Component\\\\FormProfilNumber.js\",\n  _s = $RefreshSig$();\n// import Input from \"./Input\";\nimport '../params/FormProfilNumber.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  useState,\n  useEffect\n} = require(\"react\");\nfunction FormProfilNumber() {\n  _s();\n  const [options, setOptions] = useState([]);\n  const [formValues, setFormValues] = useState({\n    selectedOption: '',\n    // Stocke la valeur sélectionnée dans le menu déroulant\n    numberOfProfiles: '' // Stocke le nombre de profils saisi\n  });\n\n  //getProfil in back \n  useEffect(() => {\n    fetch('http://localhost:8080/rh_back/ProfilController').then(response => response.json()).then(data => setOptions(data)).catch(error => console.error('Erreur lors de la récupération des données : ', error));\n  }, []);\n  // --end\n\n  const handleSelectChange = event => {\n    setFormValues(prevState => ({\n      ...prevState,\n      selectedOption: event.target.value\n    }));\n  };\n  const handleNumberInputChange = event => {\n    setFormValues(prevState => ({\n      ...prevState,\n      numberOfProfiles: event.target.value\n    }));\n  };\n  const handleFormSubmit = () => {\n    const gsonData = {\n      optionId: formValues.selectedOption,\n      numberOfProfiles: formValues.numberOfProfiles\n    };\n\n    // Envoyez gsonData à votre API ou effectuez toute autre opération souhaitée avec les données.\n    console.log(JSON.stringify(gsonData)); // Affiche les données au format JSON dans la console\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"FormProfilNumber\",\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      children: \"Choisissez un profil :\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n      value: formValues.selectedOption,\n      onChange: handleSelectChange,\n      children: options.map(option => /*#__PURE__*/_jsxDEV(\"option\", {\n        value: option.id,\n        children: option.nom\n      }, option.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 19\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      children: \"Nombre: \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 15\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"number\",\n      value: formValues.numberOfProfiles,\n      onChange: handleNumberInputChange,\n      width: \"50%\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 15\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleFormSubmit,\n      children: \"Valider\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 15\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 9\n  }, this);\n}\n_s(FormProfilNumber, \"mgkb2pabMUeQ6LFa21n8JZ+2KeE=\");\n_c = FormProfilNumber;\nexport default FormProfilNumber;\n\n// import React, { useState, useEffect } from 'react';\n// import { useNavigate } from 'react-router-dom';\n// import axios from 'axios';\n// import Selector from './Selector';\n// import Input from './Input';\n\n// const FormProfil=({title,value})=>{\n\n//     const [profils, setProfils] = useState([]);\n\n//     useEffect(() => {\n//       axios.get('http://localhost:8080/rh_back/ProfilController') // Replace with the actual endpoint\n//         .then((response) => {\n//           const profilsData = response.data;\n//           setProfils(profilsData);\n//         })\n//         .catch((error) => {\n//           console.error('Error fetching profils:', error);\n//         });\n//     }, []);\n\n//     const [formData, setFormData] = useState({\n//         selectedOptionProfil: '',\n//     });\n\n//         // PROFIL =================================================================================================================\n//     // Define a variable for the placeholder text\n//     const [placeholderProfil, setPlaceholderProfil] = useState('Select a profil');\n//     const profilsOptions = profils.map((profil) => ({\n//       label: profil.nom, //  \"label\" is the name that will display\n//       value: profil.id,\n//     }));\n//     const optionToNameMap = {};\n//     profilsOptions.forEach((profil) => {\n//       optionToNameMap[profil.value] = profil.label;\n//     });\n//     const handleProfilInputChange = (name,value) => {\n//       setFormData({\n//         ...formData,\n//         [name]: value,\n//       });\n\n//       // Set the placeholder based on the selected option's name\n//       const placeholder = optionToNameMap[value] || 'Select a profil';\n//       setPlaceholderProfil(placeholder);\n//     }\n\n//     // END PROFIL =================================================================================================================\n\n//     const navigate = useNavigate();\n//     const handleSubmit = async (e) => {\n//       e.preventDefault();\n\n//       // Create an object containing the form data\n//     //   const formDataObject = {\n//     //     selectedOptionProfil: formData.selectedOptionProfil,\n//     //     nom:\"rakoto\",\n//     //     prenom:\"Bozy\",\n//     //     // Add other form fields here as needed\n//     //   };\n\n//     //   try {\n//     //     // Send a POST request to your Java Servlet endpoint\n//     //     const response = await axios.post(\n//     //       'http://localhost:8080/rh_back/SubmitProfilController',\n//     //       formDataObject\n//     //     );\n\n//     //     // Handle the response from the server here\n//     //     console.log('Server Response:', response.data);\n\n//     //     // Redirect to another page if needed\n//     //     // history.push('/ProfilageView');\n//     //   } catch (error) {\n//     //     // Handle errors here\n//     //     console.error('Error:', error);\n//     //   }\n//       navigate(\"/ProfilageView\");\n//     };\n\n//     return (\n//         <div className=\"form-container\">\n//           <h1>{title}</h1>\n//           <form onSubmit={handleSubmit}>\n//             <div>\n//               <Selector\n//                 options={profilsOptions}\n//                 placeholder={placeholderProfil} // Use the dynamic placeholder text\n//                 label=\"Profil:\"\n//                 value={formData.selectedOptionProfil}\n//                 onChange={(value) => handleProfilInputChange('selectedOptionProfil', value)}\n//                 marginleft=\"5%\"\n//               />\n//             </div>\n//             <Input\n//                 label=\"Nombre de profil\"\n//                 type=\"number\"\n//                 wdth='50%'\n//             />\n\n//             <button type=\"submit\" style={{ marginLeft: '5%' }}>\n//               Créer\n//             </button>\n//             <button type=\"reset\">Initialiser</button>\n//           </form>\n//         </div>\n//       );\n\n// };\n// export default FormProfil;\nvar _c;\n$RefreshReg$(_c, \"FormProfilNumber\");","map":{"version":3,"names":["jsxDEV","_jsxDEV","useState","useEffect","require","FormProfilNumber","_s","options","setOptions","formValues","setFormValues","selectedOption","numberOfProfiles","fetch","then","response","json","data","catch","error","console","handleSelectChange","event","prevState","target","value","handleNumberInputChange","handleFormSubmit","gsonData","optionId","log","JSON","stringify","id","children","fileName","_jsxFileName","lineNumber","columnNumber","onChange","map","option","nom","type","width","onClick","_c","$RefreshReg$"],"sources":["D:/ITU/Rotsy/S5/Mr_Tovo/rh_front/src/Component/FormProfilNumber.js"],"sourcesContent":["// import Input from \"./Input\";\r\nimport '../params/FormProfilNumber.css';\r\n\r\nconst { useState , useEffect } = require(\"react\");\r\n\r\nfunction FormProfilNumber(){\r\n\r\n    const[options,setOptions]=useState([]);\r\n\r\n    const [formValues, setFormValues] = useState({\r\n      selectedOption: '', // Stocke la valeur sélectionnée dans le menu déroulant\r\n      numberOfProfiles: '', // Stocke le nombre de profils saisi\r\n    });\r\n\r\n    //getProfil in back \r\n    useEffect(() => {\r\n        fetch('http://localhost:8080/rh_back/ProfilController')\r\n          .then(response => response.json())\r\n          .then(data => setOptions(data))\r\n          .catch(error => console.error('Erreur lors de la récupération des données : ', error));\r\n      }, []);\r\n    // --end\r\n\r\n      const handleSelectChange = event => {\r\n        setFormValues(prevState => ({\r\n          ...prevState,\r\n          selectedOption: event.target.value,\r\n        }));\r\n      };\r\n      \r\n      const handleNumberInputChange = event => {\r\n        setFormValues(prevState => ({\r\n          ...prevState,\r\n          numberOfProfiles: event.target.value,\r\n        }));\r\n      };\r\n\r\n      const handleFormSubmit = () => {\r\n        const gsonData = {\r\n          optionId: formValues.selectedOption,\r\n          numberOfProfiles: formValues.numberOfProfiles,\r\n        };\r\n      \r\n        // Envoyez gsonData à votre API ou effectuez toute autre opération souhaitée avec les données.\r\n        console.log(JSON.stringify(gsonData)); // Affiche les données au format JSON dans la console\r\n      };      \r\n      \r\n\r\n      return (\r\n        <div id=\"FormProfilNumber\">\r\n          <label>Choisissez un profil :</label>\r\n            <select value={formValues.selectedOption} onChange={handleSelectChange}>\r\n                {options.map(option => (\r\n                  <option key={option.id} value={option.id}>\r\n                    {option.nom}\r\n                  </option>\r\n                ))}\r\n              </select>\r\n              <label>Nombre: </label>\r\n              <input\r\n                type=\"number\"\r\n                value={formValues.numberOfProfiles}\r\n                onChange={handleNumberInputChange}\r\n                width='50%'\r\n              />\r\n\r\n              <button onClick={handleFormSubmit}>Valider</button>\r\n\r\n        </div>\r\n      );    \r\n}\r\n\r\nexport default FormProfilNumber;\r\n\r\n// import React, { useState, useEffect } from 'react';\r\n// import { useNavigate } from 'react-router-dom';\r\n// import axios from 'axios';\r\n// import Selector from './Selector';\r\n// import Input from './Input';\r\n\r\n\r\n// const FormProfil=({title,value})=>{\r\n\r\n//     const [profils, setProfils] = useState([]);\r\n\r\n//     useEffect(() => {\r\n//       axios.get('http://localhost:8080/rh_back/ProfilController') // Replace with the actual endpoint\r\n//         .then((response) => {\r\n//           const profilsData = response.data;\r\n//           setProfils(profilsData);\r\n//         })\r\n//         .catch((error) => {\r\n//           console.error('Error fetching profils:', error);\r\n//         });\r\n//     }, []);\r\n\r\n//     const [formData, setFormData] = useState({\r\n//         selectedOptionProfil: '',\r\n//     });\r\n\r\n//         // PROFIL =================================================================================================================\r\n//     // Define a variable for the placeholder text\r\n//     const [placeholderProfil, setPlaceholderProfil] = useState('Select a profil');\r\n//     const profilsOptions = profils.map((profil) => ({\r\n//       label: profil.nom, //  \"label\" is the name that will display\r\n//       value: profil.id,\r\n//     }));\r\n//     const optionToNameMap = {};\r\n//     profilsOptions.forEach((profil) => {\r\n//       optionToNameMap[profil.value] = profil.label;\r\n//     });\r\n//     const handleProfilInputChange = (name,value) => {\r\n//       setFormData({\r\n//         ...formData,\r\n//         [name]: value,\r\n//       });\r\n    \r\n//       // Set the placeholder based on the selected option's name\r\n//       const placeholder = optionToNameMap[value] || 'Select a profil';\r\n//       setPlaceholderProfil(placeholder);\r\n//     }\r\n\r\n//     // END PROFIL =================================================================================================================\r\n\r\n//     const navigate = useNavigate();\r\n//     const handleSubmit = async (e) => {\r\n//       e.preventDefault();\r\n    \r\n//       // Create an object containing the form data\r\n//     //   const formDataObject = {\r\n//     //     selectedOptionProfil: formData.selectedOptionProfil,\r\n//     //     nom:\"rakoto\",\r\n//     //     prenom:\"Bozy\",\r\n//     //     // Add other form fields here as needed\r\n//     //   };\r\n    \r\n//     //   try {\r\n//     //     // Send a POST request to your Java Servlet endpoint\r\n//     //     const response = await axios.post(\r\n//     //       'http://localhost:8080/rh_back/SubmitProfilController',\r\n//     //       formDataObject\r\n//     //     );\r\n    \r\n//     //     // Handle the response from the server here\r\n//     //     console.log('Server Response:', response.data);\r\n    \r\n//     //     // Redirect to another page if needed\r\n//     //     // history.push('/ProfilageView');\r\n//     //   } catch (error) {\r\n//     //     // Handle errors here\r\n//     //     console.error('Error:', error);\r\n//     //   }\r\n//       navigate(\"/ProfilageView\");\r\n//     };\r\n\r\n//     return (\r\n//         <div className=\"form-container\">\r\n//           <h1>{title}</h1>\r\n//           <form onSubmit={handleSubmit}>\r\n//             <div>\r\n//               <Selector\r\n//                 options={profilsOptions}\r\n//                 placeholder={placeholderProfil} // Use the dynamic placeholder text\r\n//                 label=\"Profil:\"\r\n//                 value={formData.selectedOptionProfil}\r\n//                 onChange={(value) => handleProfilInputChange('selectedOptionProfil', value)}\r\n//                 marginleft=\"5%\"\r\n//               />\r\n//             </div>\r\n//             <Input\r\n//                 label=\"Nombre de profil\"\r\n//                 type=\"number\"\r\n//                 wdth='50%'\r\n//             />\r\n    \r\n//             <button type=\"submit\" style={{ marginLeft: '5%' }}>\r\n//               Créer\r\n//             </button>\r\n//             <button type=\"reset\">Initialiser</button>\r\n//           </form>\r\n//         </div>\r\n//       );\r\n\r\n// };\r\n// export default FormProfil;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}